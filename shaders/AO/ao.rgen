#version 460

#extension GL_EXT_ray_tracing : require
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable

#include "ao_common.glsl"

struct GlobalUniforms {
    mat4 view_inverse;
    mat4 proj_inverse;
};

layout(location = 0) rayPayloadEXT MainPassPayload main_payload;
layout(location = 1) rayPayloadEXT AOPayload ao_payload;

layout(set = 0, binding = 0) uniform accelerationStructureEXT scene_as;
layout(set = 0, binding = 1, rgba8) uniform image2D image;
layout(set = 1, binding = 0) uniform _GlobalUniforms { GlobalUniforms globals; };

float random(vec2 st) {
    return fract(sin(dot(st.xy, vec2(12.9898, 78.233))) * 43758.5453123);
}

vec3 randomSpherePoint(vec2 rand) {
    float ang1 = (rand.x + 1.0) * PI;
    float u = rand.y;
    float u2 = u * u;
    float sqrt1MinusU2 = sqrt(1.0 - u2);
    float x = sqrt1MinusU2 * cos(ang1);
    float y = sqrt1MinusU2 * sin(ang1);
    float z = u;
    return vec3(x, y, z);
}

vec3 randomHemispherePoint(vec2 rand, vec3 n) {
    vec3 v = randomSpherePoint(rand);
    return v * sign(dot(v, n));
}

vec3 rotate_around_y(vec3 a, vec3 normal) {
    float theta = atan(normal.y, normal.x);
    float phi = acos(normal.z);

    mat3 R_y = mat3(cos(phi), 0.0, sin(phi), 0.0, 1.0, 0.0, -sin(phi), 0.0, cos(phi));
    mat3 R_z = mat3(cos(phi), -sin(phi), 0.0, sin(phi), cos(phi), 0.0, 0, 0, 1);

    mat3 R = R_z * R_y;
    vec3 rotated = R_z * (R_y * a);

    return rotated;
}

vec3 random_hemisphere(vec2 uv) {
    const float m = 1.0;
    float theta = acos(pow(1.0 - uv.x, 1.0 / (1.0 + m)));
    float phi = 2.0 * PI * uv.y;

    float x = sin(theta) * cos(phi);
    float y = sin(theta) * sin(phi);
    float z = cos(theta);

    return vec3(x, y, z);
}

void main() {
    const vec2 pixel_center = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const vec2 in_uv = pixel_center / vec2(gl_LaunchSizeEXT.xy);

    const vec2 d = in_uv * 2.0 - 1.0;

    vec3 world_origin = (globals.view_inverse * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
    const vec3 target = (globals.proj_inverse * vec4(d.x, -d.y, 1.0, 1.0)).xyz;
    const vec3 world_direction = (globals.view_inverse * vec4(normalize(target), 0.0)).xyz;

    const uint cull_mask = 0xFFu;

    vec3 origin = world_origin;
    vec3 direction = world_direction;

    {
        const uint ray_flags = gl_RayFlagsOpaqueEXT & gl_RayFlagsCullBackFacingTrianglesEXT;

        main_payload.color = vec3(0.0);
        main_payload.t = -1.0;

        traceRayEXT(scene_as, ray_flags, cull_mask, 0u, 0u, 0u, origin, 0.0001, direction, 1000.0, 0);
    }

    vec3 final_color = main_payload.color;

    vec3 ao_color = vec3(0.0);

    if (main_payload.t > 0.0) {
        for (uint i = 0; i < float(AO_SPP) / (main_payload.t + 1.0); i++) {
            const uint ray_flags = gl_RayFlagsTerminateOnFirstHitEXT;
            ao_payload.t = 0.0;

            vec3 ao_sample_origin = origin + direction * main_payload.t + main_payload.normal * 0.01;

            float random_x = random(in_uv * 2.0292312);
            float random_y = random(in_uv * 4.1203922);

            // vec3 ao_sample_direction = rotate_around_y(random_hemisphere(vec2(random_x, random_y)), main_payload.normal);
            vec3 ao_sample_direction = randomHemispherePoint(vec2(random_x, random_y), main_payload.normal);

            traceRayEXT(scene_as, ray_flags, cull_mask, 1u, 0u, 0u, ao_sample_origin, FLT_MIN, ao_sample_direction, 1.0, 1);

            ao_color += vec3(ao_payload.t);
            // ao_color += rotate_around_y(ao_sample_direction, main_payload.normal);
        }
    }

    ao_color /= AO_SPP;

    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(ao_color, 1.0));
}