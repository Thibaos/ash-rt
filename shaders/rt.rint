#version 460

#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_buffer_reference2 : require

#include "common.glsl"

struct Voxel {
  vec4 position;
  float palette_index;
};

struct Aabb
{
  vec3 minimum;
  vec3 maximum;
};

layout(set = 0, binding = 3, scalar) buffer voxels { Voxel allVoxels[]; };

uint hit_kind(const Aabb aabb, const vec3 hit_point) {
    if (abs(hit_point.x - aabb.minimum.x) < 0.00001) {
        return KIND_LEFT_FACE;
    } else if (abs(hit_point.y - aabb.minimum.y) < 0.00001) {
        return KIND_BOTTOM_FACE;
    } else if (abs(hit_point.z - aabb.minimum.z) < 0.00001) {
        return KIND_FRONT_FACE;
    } else if (abs(hit_point.x - aabb.maximum.x) < 0.00001) {
        return KIND_RIGHT_FACE;
    } else if (abs(hit_point.y - aabb.maximum.y) < 0.00001) {
        return KIND_TOP_FACE;
    } else if (abs(hit_point.z - aabb.maximum.z) < 0.00001) {
        return KIND_BACK_FACE;
    }

    return KIND_UNKNOWN;
}

float hitAabb(const Aabb aabb, const vec3 origin, const vec3 direction) {
    uint kind = KIND_FRONT_FACE;
    vec3  invDir = 1.0 / direction;
    vec3  tbot   = invDir * (aabb.minimum - origin);
    vec3  ttop   = invDir * (aabb.maximum - origin);
    vec3  tmin   = min(ttop, tbot);
    vec3  tmax   = max(ttop, tbot);
    float t0     = max(tmin.x, max(tmin.y, tmin.z));
    float t1     = min(tmax.x, min(tmax.y, tmax.z));
    return t1 > max(t0, 0.0) ? t0 : -1.0;
}

void main() {
    vec3 origin = gl_WorldRayOriginEXT;
    vec3 direction = gl_WorldRayDirectionEXT;

    Voxel voxel = allVoxels[gl_GeometryIndexEXT];

    Aabb aabb;
    aabb.minimum = voxel.position.xyz;
    aabb.maximum = voxel.position.xyz + vec3(1.0);
    float tHit = hitAabb(aabb, origin, direction);

    if (tHit > 0.0) {
        reportIntersectionEXT(tHit, hit_kind(aabb, origin + direction * tHit));
    }
}