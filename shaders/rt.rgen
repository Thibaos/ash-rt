#version 460

#extension GL_EXT_ray_tracing : require
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable

#include "common.glsl"

struct GlobalUniforms {
    mat4 view_inverse;
    mat4 proj_inverse;
};

layout(location = 0) rayPayloadEXT RayPayload payload;

layout(set = 0, binding = 0) uniform accelerationStructureEXT top_level_as;
layout(set = 0, binding = 1, rgba8) uniform image2D image;
layout(set = 1, binding = 0) uniform _GlobalUniforms { GlobalUniforms globals; };

void main() {
    const vec2 pixel_center = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const vec2 in_uv = pixel_center / vec2(gl_LaunchSizeEXT.xy);

    const vec2 d = in_uv * 2.0 - 1.0;

    vec3 world_origin = (globals.view_inverse * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
    const vec3 target = (globals.proj_inverse * vec4(d.x, -d.y, 1.0, 1.0)).xyz;
    const vec3 world_direction = (globals.view_inverse * vec4(normalize(target), 0.0)).xyz;

    const uint cull_mask = 0xFFu;
    const float tmin = 0.001;
    const float tmax = 10000.0;

    vec3 origin = world_origin;
    vec3 direction = world_direction;

    vec3 first_hit_color = vec3(0.0);
    vec3 reflection_color = vec3(0.0);

    // first pass
    {
        const uint ray_flags = gl_RayFlagsTerminateOnFirstHitEXT;

        payload.color = vec3(0.0);
        payload.t = -1.0;

        traceRayEXT(top_level_as, ray_flags, cull_mask, 0u, 0u, 0u, origin, tmin, direction, tmax, 0);

        first_hit_color = payload.color;
    }

    // reflection pass
    {
        const uint ray_flags = gl_RayFlagsOpaqueEXT;

        payload.color = vec3(0.0);
        payload.t = -1.0;

        const int recursion = 3;

        for (uint i = 0; i < recursion; i++) {
            payload.attenuation = float(recursion - i) / float(recursion);

            traceRayEXT(top_level_as, ray_flags, cull_mask, 0u, 0u, 0u, origin, tmin, direction, tmax, 0);

            if (payload.t > 0.0 && i != 0) {
                reflection_color += payload.color / (i + 1);
            }

            if (payload.t < 0.0) {
                break;
            }

            origin = payload.origin;
            direction = payload.direction;
        }
    }

    vec3 final_color = first_hit_color / 2.0 + first_hit_color * reflection_color;

    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(first_hit_color, 1.0));
}